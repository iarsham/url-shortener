basePath: /api/
definitions:
  entity.AlreadyVerifiedResponse:
    properties:
      response:
        example: user already verified
        type: string
    type: object
  entity.Authenticate:
    properties:
      email:
        example: james@yahoo.com
        type: string
      password:
        example: password!@#123
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  entity.DBErrorResponse:
    properties:
      response:
        example: failed to save data to db
        type: string
    type: object
  entity.DataBodyResponse:
    properties:
      response:
        example: body properties required
        type: string
    type: object
  entity.IncorrectCurrentPasswordResponse:
    properties:
      response:
        example: current password is incorrect
        type: string
    type: object
  entity.LinkExpireResponse:
    properties:
      response:
        example: link is invalid or expired
        type: string
    type: object
  entity.LinkRequest:
    properties:
      url:
        type: string
    required:
    - url
    type: object
  entity.LoginSignUpOkResponse:
    properties:
      response:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImI0Y2MzODE4NDk2QG15bWFpbHkubG9sIiwiZXhwIjoxNjkwOTIxNjMxLCJ1c2VyX2lkIjoiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIn0.Vs2BXM2Z6hr4zqLLWe08FrpKhDfRpnaFhu4TKB5Spb4
        type: string
    type: object
  entity.NewPasswordEqualResponse:
    properties:
      response:
        example: new passwords must be equal
        type: string
    type: object
  entity.PasswordIncorrectResponsse:
    properties:
      response:
        example: password is incorrect
        type: string
    type: object
  entity.PasswordOkResponse:
    properties:
      response:
        example: password changed successfully
        type: string
    type: object
  entity.ShortLinkDBErrorResponse:
    properties:
      response:
        example: cant short long url
        type: string
    type: object
  entity.ShortLinkExistsResponse:
    properties:
      response:
        example: url already exists
        type: string
    type: object
  entity.ShortLinkNotExistsResponse:
    properties:
      response:
        example: url not found
        type: string
    type: object
  entity.ShortLinkOkResponse:
    properties:
      response:
        example: http://domain/yjMl1vl
        type: string
    type: object
  entity.ShortLinkValidateResponse:
    properties:
      response:
        example: url is invalid
        type: string
    type: object
  entity.User404Responsse:
    properties:
      response:
        example: user not found
        type: string
    type: object
  entity.UserExistResponse:
    properties:
      response:
        example: user with this email already exists
        type: string
    type: object
  entity.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      updated_at:
        type: string
    type: object
  entity.VerifyOKResponse:
    properties:
      response:
        example: user verified successfully
        type: string
    type: object
host: localhost:8000
info:
  contact:
    email: arshamdev2001@gmail.com
  termsOfService: http://swagger.io/terms/
  title: UrlShortener Swagger Document
  version: "1.0"
paths:
  /auth/login/:
    post:
      consumes:
      - application/json
      description: Login user with email and password
      parameters:
      - description: Login Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Authenticate'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.LoginSignUpOkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.DataBodyResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.PasswordIncorrectResponsse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.User404Responsse'
      summary: Login User
      tags:
      - Auth
  /auth/signup/:
    post:
      consumes:
      - application/json
      description: register user with email and password and sending verfication email
      parameters:
      - description: Register Data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.Authenticate'
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.LoginSignUpOkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.DataBodyResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.UserExistResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.DBErrorResponse'
      summary: Register User
      tags:
      - Auth
  /auth/verify-user/:
    post:
      consumes:
      - application/json
      description: send verification link key in query param to active user
      parameters:
      - description: verification query param
        in: query
        name: key
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.VerifyOKResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.DBErrorResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.AlreadyVerifiedResponse'
        "410":
          description: Gone
          schema:
            $ref: '#/definitions/entity.LinkExpireResponse'
      summary: Verify User Account
      tags:
      - Auth
  /link/{key}:
    get:
      consumes:
      - application/json
      description: Redirect short url to your main url
      parameters:
      - description: url key
        in: path
        name: key
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ShortLinkOkResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.ShortLinkNotExistsResponse'
      summary: Redirect URL
      tags:
      - URL
  /link/create-short:
    post:
      consumes:
      - application/json
      description: Create a short url that redirect to your main url
      parameters:
      - description: create short url required body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entity.LinkRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.ShortLinkOkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.ShortLinkValidateResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.ShortLinkExistsResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.ShortLinkDBErrorResponse'
      summary: Create Short URL
      tags:
      - URL
  /user/change-password/:
    post:
      consumes:
      - application/json
      description: Change user password with current and new password
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.PasswordOkResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.NewPasswordEqualResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.IncorrectCurrentPasswordResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.DBErrorResponse'
      summary: Change Password
      tags:
      - User
  /user/delete-user/:
    delete:
      consumes:
      - application/json
      description: Delete user record from db
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.User404Responsse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.DBErrorResponse'
      summary: Delete User
      tags:
      - User
  /user/me/:
    get:
      consumes:
      - application/json
      description: Get user data information
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.User404Responsse'
      summary: Get User
      tags:
      - User
schemes:
- http
- https
securityDefinitions:
  Authorization:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
