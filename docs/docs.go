// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "email": "arshamdev2001@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login/": {
            "post": {
                "description": "Login user with email and password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "Login Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Authenticate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.LoginSignUpOkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.DataBodyResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.PasswordIncorrectResponsse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.User404Responsse"
                        }
                    }
                }
            }
        },
        "/auth/signup/": {
            "post": {
                "description": "register user with email and password and sending verfication email",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Register User",
                "parameters": [
                    {
                        "description": "Register Data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.Authenticate"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entity.LoginSignUpOkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.DataBodyResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/entity.UserExistResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.DBErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/verify-user/": {
            "post": {
                "description": "send verification link key in query param to active user",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Verify User Account",
                "parameters": [
                    {
                        "type": "string",
                        "description": "verification query param",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.VerifyOKResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.DBErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/entity.AlreadyVerifiedResponse"
                        }
                    },
                    "410": {
                        "description": "Gone",
                        "schema": {
                            "$ref": "#/definitions/entity.LinkExpireResponse"
                        }
                    }
                }
            }
        },
        "/user/change-password/": {
            "post": {
                "description": "Change user password with current and new password",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change Password",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.PasswordOkResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/entity.NewPasswordEqualResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/entity.IncorrectCurrentPasswordResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.DBErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/delete-user/": {
            "delete": {
                "description": "Delete user record from db",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete User",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.User404Responsse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/entity.DBErrorResponse"
                        }
                    }
                }
            }
        },
        "/user/me/": {
            "get": {
                "description": "Get user data information",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entity.UserResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/entity.User404Responsse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.AlreadyVerifiedResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "user already verified"
                }
            }
        },
        "entity.Authenticate": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "james@yahoo.com"
                },
                "password": {
                    "type": "string",
                    "minLength": 8,
                    "example": "password!@#123"
                }
            }
        },
        "entity.DBErrorResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "failed to save data to db"
                }
            }
        },
        "entity.DataBodyResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "body properties required"
                }
            }
        },
        "entity.IncorrectCurrentPasswordResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "current password is incorrect"
                }
            }
        },
        "entity.LinkExpireResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "link is invalid or expired"
                }
            }
        },
        "entity.LoginSignUpOkResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImI0Y2MzODE4NDk2QG15bWFpbHkubG9sIiwiZXhwIjoxNjkwOTIxNjMxLCJ1c2VyX2lkIjoiMDAwMDAwMDAtMDAwMC0wMDAwLTAwMDAtMDAwMDAwMDAwMDAwIn0.Vs2BXM2Z6hr4zqLLWe08FrpKhDfRpnaFhu4TKB5Spb4"
                }
            }
        },
        "entity.NewPasswordEqualResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "new passwords must be equal"
                }
            }
        },
        "entity.PasswordIncorrectResponsse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "password is incorrect"
                }
            }
        },
        "entity.PasswordOkResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "password changed successfully"
                }
            }
        },
        "entity.User404Responsse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "user not found"
                }
            }
        },
        "entity.UserExistResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "user with this email already exists"
                }
            }
        },
        "entity.UserResponse": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "is_active": {
                    "type": "boolean"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entity.VerifyOKResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string",
                    "example": "user verified successfully"
                }
            }
        }
    },
    "securityDefinitions": {
        "Authorization": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/api/",
	Schemes:          []string{"http", "https"},
	Title:            "UrlShortener Swagger Document",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
